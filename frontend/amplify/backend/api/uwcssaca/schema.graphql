type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "userSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "userSortBySortKey"
  ) {
  id: ID!
  username: String!
  email: String!
  owner: String!
  firstName: String
  lastName: String
  intro: String
  major: String
  avatarImgS3Key: String
  backGroundImgS3Key: String
  linkedIn: String
  github: String
  sortKey: SortKey!
  createdAt: AWSDateTime!
  uWindsorEmail: String
    @auth(
      rules: [
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin"] }
        { allow: private, operations: [read] }
        { allow: public, operations: [read], provider: iam }
      ]
    )
  badges: [String]
    @auth(
      rules: [
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin"] }
        { allow: private, operations: [read] }
        { allow: public, operations: [read], provider: iam }
      ]
    )
  userEducations: [UserEducation] @connection(keyName: "byUser", fields: ["id"])
  userExperiences: [UserExperience]
    @connection(keyName: "byUser", fields: ["id"])
  marketUserInfo: [MarketUserInfo]
    @connection(keyName: "byUser", fields: ["id"])
  likes: [Like] @connection(keyName: "byUser", fields: ["id"])
  beingLiked: [Like] @connection(keyName: "byUserBeingLiked", fields: ["id"])
  topics: [Topic] @connection(keyName: "byUser", fields: ["id"])
  articles: [Article] @connection(keyName: "byUser", fields: ["id"])
  articleComments: [ArticleComment]
    @connection(keyName: "byUser", fields: ["id"])
  events: [Event] @connection(keyName: "byUser", fields: ["id"])
  eventParticipants: [EventParticipant]
    @connection(keyName: "byUser", fields: ["id"])
  departments: [Department] @connection(keyName: "byUser", fields: ["id"])
  uwcssaJobs: [UwcssaJob] @connection(keyName: "byUser", fields: ["id"])
  uwcssaJobResumes: [UwcssaJobResume]
    @connection(keyName: "byUser", fields: ["id"])
  forumTopics: [ForumTopic] @connection(keyName: "byUser", fields: ["id"])
  forumSubTopics: [ForumSubTopic] @connection(keyName: "byUser", fields: ["id"])
  forumPosts: [ForumPost] @connection(keyName: "byUser", fields: ["id"])
  forumPostComments: [ForumPostComment]
    @connection(keyName: "byUser", fields: ["id"])
  forumPostSubComments: [ForumPostSubComment]
    @connection(keyName: "byUser", fields: ["id"])
  marketItems: [MarketItem] @connection(keyName: "byUser", fields: ["id"])
  marketVehicles: [MarketVehicle] @connection(keyName: "byUser", fields: ["id"])
  marketRentals: [MarketRental] @connection(keyName: "byUser", fields: ["id"])
}

type UserEducation
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  school: String!
  degree: String
  fieldOfStudy: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  grade: Int
  description: String
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type UserExperience
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  title: String!
  employmentType: String
  companyName: String!
  location: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  industry: String
  description: String
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type Topic
  @model
  @auth(
    rules: [
      # { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  name: String!
  # like: [String]!
  # unlike: [String]!
  articles: [Article] @connection(keyName: "byTopic", fields: ["id"])
  events: [Event] @connection(keyName: "byTopic", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

# type Type
#   @model
#   @auth(
#     rules: [
#       { allow: owner }
#       { allow: groups, groups: ["admin", "staff"] }
#       { allow: private, operations: [read] }
#       { allow: public, operations: [read], provider: iam }
#     ]
#   ) {
#   id: ID!
#   name: String!
#   like: [String]!
#   unlike: [String]!
#   articles: [Article] @connection(keyName: "byType", fields: ["id"])
# }
# 不需要了，用不着

type Article
  @model
  @auth(
    rules: [
      # { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "articleSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "articleSortBySortKey"
  )
  @key(name: "byTopic", fields: ["topicID"])
  # @key(name: "byType", fields: ["typeID"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  title: String!
  content: String!
  imgS3Keys: [String]
  # like: [String]!
  # unlike: [String]!
  likes: [Like] @connection(keyName: "byArticle", fields: ["id"])
  tags: [String]
  sortKey: SortKey! #用来当第二索引的
  active: Boolean!
  createdAt: AWSDateTime!
  topicID: ID!
  topic: Topic! @connection(fields: ["topicID"])
  # typeID: ID!
  # type: Type! @connection(fields: ["typeID"])
  articleComments: [ArticleComment]
    @connection(keyName: "byArticle", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum SortKey {
  SortKey
}

type ArticleComment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "articleCommentSortByArticleID"
    fields: ["articleID", "createdAt"]
    queryField: "articleCommentSortByArticleID"
  )
  @key(name: "byArticle", fields: ["articleID", "createdAt"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  content: String!
  # like: [String]!
  # unlike: [String]!
  likes: [Like] @connection(keyName: "byArticleComment", fields: ["id"])
  active: Boolean!
  articleID: ID!
  article: Article! @connection(fields: ["articleID"])
  createdAt: AWSDateTime!
  articleSubComments: [ArticleSubComment]
    @connection(keyName: "byArticleComment", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ArticleSubComment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "articleSubCommentSortByArticleCommentID"
    fields: ["articleCommentID", "createdAt"]
    queryField: "articleSubCommentSortByArticleCommentID"
  )
  @key(name: "byArticleComment", fields: ["articleCommentID", "createdAt"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  content: String!
  # like: [String]!
  # unlike: [String]!
  likes: [Like] @connection(keyName: "byArticleSubComment", fields: ["id"])
  active: Boolean!
  articleCommentID: ID!
  articleComment: ArticleComment! @connection(fields: ["articleCommentID"])
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type Event
  @model
  @auth(
    rules: [
      # { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "eventSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "eventSortBySortKey"
  )
  @key(name: "byTopic", fields: ["topicID"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  title: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  online: Boolean! #代表线上线下
  group: Boolean!
  backGroundImgS3Key: String
  qrCodeImgS3Key: String
  posterImgS3Key: String
  content: String
  location: String
  sponsor: [String]
  tags: [String]
  eventStatus: EventStatus!
  active: Boolean!
  createdAt: AWSDateTime!
  sortKey: SortKey!
  topicID: ID!
  topic: Topic! @connection(fields: ["topicID"])
  eventParticipants: [EventParticipant]
    @connection(keyName: "byEvent", fields: ["id"])
  likes: [Like] @connection(keyName: "byEvent", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum EventStatus {
  ComingSoon
  InProgress
  SignUpClosed
  Finished
  Canceled
}

type EventParticipant
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "EventParticipantSortByEventID"
    fields: ["eventID", "createdAt"]
    queryField: "EventParticipantSortByEventID"
  )
  @key(name: "byUser", fields: ["userID"])
  @key(name: "byEvent", fields: ["eventID", "createdAt"]) {
  id: ID!
  name: String!
  email: String!
  address: String
  phone: String
  weChat: String
  message: String
  numberOfPeople: Int!
  active: Boolean!
  createdAt: AWSDateTime!
  eventParticipantStatus: EventParticipantStatus!
  eventID: ID!
  event: Event! @connection(fields: ["eventID"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum EventParticipantStatus {
  ArriveOnTime
  CanNotArrive
  Undecided
}

type Department
  @model
  @auth(
    rules: [
      # { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  name: String!
  introduction: String
  email: String
  leader: String
  uwcssaJobs: [UwcssaJob] @connection(keyName: "byDepartment", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type UwcssaJob
  @model
  @auth(
    rules: [
      # { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "UwcssaJobSortByDepartmentID"
    fields: ["departmentID", "createdAt"]
    queryField: "UwcssaJobSortByDepartmentID"
  )
  @key(name: "byDepartment", fields: ["departmentID", "createdAt"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  introduction: String!
  title: String!
  requirements: [String]!
  bonus: [String]!
  imgS3Key: String
  benefits: [String]!
  schedule: [String]!
  like: [String]!
  unlike: [String]!
  active: Boolean!
  createdAt: AWSDateTime!
  departmentID: ID!
  department: Department @connection(fields: ["departmentID"])
  uwcssaJobResumes: [UwcssaJobResume]
    @connection(keyName: "byUwcssaJob", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type UwcssaJobResume
  @model
  @auth(
    rules: [
      { allow: owner } # 需要改只能上传和查看
      { allow: groups, groups: ["admin", "staff"] }
      # { allow: private, operations: [read] }
      # { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "uwcssaJobResumeSortByUwcssaJobID"
    fields: ["uwcssaJobID", "createdAt"]
    queryField: "uwcssaJobResumeSortByUwcssaJobID"
  )
  @key(name: "byUwcssaJob", fields: ["uwcssaJobID", "createdAt"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  name: String!
  email: String!
  resumeFileS3Key: String
  phone: String!
  message: String
  uwcssaJobResumeStatus: UwcssaJobResumeStatus!
  createdAt: AWSDateTime!
  uwcssaJobID: ID!
  uwcssaJob: UwcssaJob! @connection(fields: ["uwcssaJobID"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum UwcssaJobResumeStatus {
  pending
  inProgress
  finish
}

type ForumTopic
  @model
  @auth(
    rules: [
      # { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  name: String!
  forumSubTopics: [ForumSubTopic]!
    @connection(keyName: "byForumTopic", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ForumSubTopic
  @model
  @auth(
    rules: [
      # { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byForumTopic", fields: ["forumTopicID", "createdAt"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  forumTopicID: ID!
  forumTopic: ForumTopic! @connection(fields: ["forumTopicID"])
  forumPosts: [ForumPost]!
    @connection(keyName: "byForumSubTopic", fields: ["id"])

  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ForumPost
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "ForumPostSortByForumSubTopicID"
    fields: ["forumSubTopicID", "createdAt"]
    queryField: "ForumPostSortByForumSubTopicID"
  )
  @key(name: "byForumSubTopic", fields: ["forumSubTopicID", "createdAt"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  title: String!
  content: String!
  imgS3Keys: [String]
  tags: [String]
  # like: [String]!
  # unlike: [String]!
  likes: [Like] @connection(keyName: "byForumPost", fields: ["id"])
  active: Boolean!
  createdAt: AWSDateTime!
  forumSubTopicID: ID!
  forumSubTopic: ForumSubTopic! @connection(fields: ["forumSubTopicID"])
  forumPostComments: [ForumPostComment]!
    @connection(keyName: "byForumPost", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ForumPostComment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "ForumPostCommentSortByForumPostID"
    fields: ["forumPostID", "createdAt"]
    queryField: "ForumPostCommentSortByForumPostID"
  )
  @key(name: "byForumPost", fields: ["forumPostID", "createdAt"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  content: String!
  # like: [String]!
  # unlike: [String]!
  likes: [Like] @connection(keyName: "byForumPostComment", fields: ["id"])
  createdAt: AWSDateTime!
  active: Boolean!
  forumPostID: ID!
  forumPost: ForumPost! @connection(fields: ["forumPostID"])
  forumPostSubComments: [ForumPostSubComment]!
    @connection(keyName: "byForumPostComment", fields: ["id"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type ForumPostSubComment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "ForumPostSubCommentSortByForumPostCommentID"
    fields: ["forumPostCommentID", "createdAt"]
    queryField: "ForumPostSubCommentSortByForumPostCommentID"
  )
  @key(name: "byForumPostComment", fields: ["forumPostCommentID", "createdAt"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  content: String!
  # like: [String]!
  # unlike: [String]!
  likes: [Like] @connection(keyName: "byForumPostSubComment", fields: ["id"])
  active: Boolean!
  createdAt: AWSDateTime!
  forumPostCommentID: ID!
  forumPostComment: ForumPostComment!
    @connection(fields: ["forumPostCommentID"])
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type MarketUserInfo
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  phone: String
  weChat: String
  email: String
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type MarketItem
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "marketItemSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "marketItemSortBySortKey"
  )
  @key(
    name: "marketItemSortByMarketItemCategory"
    fields: ["marketItemCategory", "createdAt"]
    queryField: "marketItemSortByMarketItemCategory"
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  name: String!
  imgS3Keys: [String]!
  title: String!
  price: Int
  description: String
  location: String
  marketItemCondition: MarketItemCondition!
  marketItemCategory: MarketItemCategory!
  tags: [String]
  sortKey: SortKey!
  active: Boolean!
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum MarketItemCondition {
  New
  UsedLikeNew
  UsedGood
  UsedFair

  Other
}

enum MarketItemCategory {
  Tools
  Furniture
  HouseHold
  Garden
  Appliances

  VideoGames
  BooksMoviesMusic

  BagsLuggage
  WomenClothingShoes
  MenClothingShoes
  JewelryAccessories

  HealthBeauty
  PetSupplies
  BabyKids
  ToysGames

  ElectronicsComputers
  MobilePhones

  Bicycles
  ArtsCrafts
  SportsOutdoors
  AutoParts
  MusicalInstruments
  AntiquesCollectibles

  GarageSale
  Miscellaneous

  Other
}

type MarketVehicle
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "marketVehicleSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "marketVehicleSortBySortKey"
  )
  @key(
    name: "marketVehicleSortByVehicleType"
    fields: ["vehicleType", "createdAt"]
    queryField: "marketVehicleSortByVehicleType"
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  vehicleType: VehicleType!
  imgS3Keys: [String]!
  location: String
  year: Int!
  make: String!
  model: String!
  exteriorColor: String
  interiorColor: String
  fuelType: String
  price: Int
  description: String
  active: Boolean!
  createdAt: AWSDateTime!
  sortKey: SortKey!
  tags: [String]
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum VehicleType {
  CarTruck
  Motorcycle
  PowerSport
  RVCamper
  Trailer
  Other
}

type MarketRental
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "marketRentalSortBySortKey"
    fields: ["sortKey", "createdAt"]
    queryField: "marketRentalSortBySortKey"
  )
  @key(
    name: "marketRentalSortByMarketRentalSaleRent"
    fields: ["marketRentalSaleRent", "createdAt"]
    queryField: "marketRentalSortByMarketRentalSaleRent"
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  imgS3Keys: [String]!
  marketRentalSaleRent: MarketRentalSaleRent!
  propertyType: PropertyType!
  bedroomCounts: Int
  bathroomsCounts: Int
  price: Int
  address: String
  description: String
  propertySize: Int
  dateAvailable: AWSDateTime
  laundryType: LaundryType
  airConditionType: AirConditionType
  heatingType: HeatingType
  catFriendly: Boolean
  dogFriendly: Boolean
  tags: [String]
  active: Boolean!
  sortKey: SortKey!
  createdAt: AWSDateTime!
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

enum MarketRentalSaleRent {
  Rent
  ForSale
  Other
}

enum PropertyType {
  Apartment
  House
  RoomOnly
  Townhouse
  Other
}
enum LaundryType {
  InUnitLaundry
  LaundryInBuilding
  LaundryAvailable
  None
  Other
}

enum AirConditionType {
  CentralAC
  ACAvailable
  None
  Other
}

enum HeatingType {
  CentralHeating
  ElectricHeating
  GasHeating
  RadiatorHeating
  Other
}

type Like
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUserBeingLiked", fields: ["userID"])
  @key(name: "byUser", fields: ["itemID"])
  @key(name: "byArticle", fields: ["itemID"])
  @key(name: "byArticleComment", fields: ["itemID"])
  @key(name: "byArticleSubComment", fields: ["itemID"])
  @key(name: "byEvent", fields: ["itemID"])
  @key(name: "byForumPost", fields: ["itemID"])
  @key(name: "byForumPostComment", fields: ["itemID"])
  @key(name: "byForumPostSubComment", fields: ["itemID"]) {
  id: ID!
  itemID: ID!
  article: Article! @connection(fields: ["itemID"])
  articleComment: ArticleComment! @connection(fields: ["itemID"])
  articleSubComment: ArticleSubComment! @connection(fields: ["itemID"])
  event: Event! @connection(fields: ["itemID"])
  forumPost: ForumPost! @connection(fields: ["itemID"])
  forumPostComment: ForumPostComment! @connection(fields: ["itemID"])
  forumPostSubComment: ForumPostSubComment! @connection(fields: ["itemID"])
  user: User! @connection(fields: ["itemID"])
  userID: ID!
  userBeingLiked: User @connection(fields: ["userID"])
}
